# SYNTAX TEST "Packages/YamlPipelines/Gitlab CICD.sublime-syntax"
variables:
# ^^^^^^^ meta.mapping.key meta.string string.unquoted.plain.out - entity
#        ^ meta.mapping punctuation.separator.key-value.mapping
  DEPLOY_SITE: "https://example.com/"

build-job:
# ^^^^^^^ entity.name.label
#        ^ punctuation.separator.key-value - entity
  stage: build
# ^^^^^^^^^^^^^ - entity
  script:
# ^^^^^^ string.unquoted.plain.out keyword.control.flow.script
#       ^ punctuation.separator.key-value
    - echo "Hello, $GITLAB_USER_LOGIN!"
#   ^ punctuation.definition.block.sequence.item
#     ^^^^ source.shell meta.function-call.identifier support.function.echo
  after_script:
# ^^^^^^^^^^^^ string.unquoted.plain.out keyword.control.flow.script
#             ^ punctuation.separator.key-value
    - echo "Execute this command after the `script` section completes."
#   ^ punctuation.definition.block.sequence.item
#     ^^^^ source.shell meta.function-call.identifier support.function.echo
  before_script:
# ^^^^^^^^^^^^^ string.unquoted.plain.out keyword.control.flow.script
#              ^ punctuation.separator.key-value
    - echo "Execute this `before_script` in all jobs by default."
#   ^ punctuation.definition.block.sequence.item
#     ^^^^ source.shell meta.function-call.identifier support.function.echo

# <- - source.shell
test-job1:
# ^^^^^^^ entity.name.label
#        ^ punctuation.separator.key-value - entity
  stage: test
# ^^^^^ meta.mapping.key meta.string string.unquoted.plain.out - entity
  script:
# ^^^^^^ string.unquoted.plain.out keyword.control.flow.script
#       ^ punctuation.separator.key-value
    - echo "This job tests something"
#   ^ punctuation.definition.block.sequence.item
#^^^ - punctuation
#    ^ - punctuation
  - |
# ^ meta.block.script punctuation.definition.block.sequence.item
#   ^ meta.block.script keyword.control.flow.block-scalar.literal
    echo "First command line."
    #^^^ meta.function-call.identifier support.function.echo
    echo "Second command line."
    #^^^ meta.function-call.identifier support.function.echo
    echo "Third command line."

test-job2:
# <- - source.shell
  stage: test
  script:
    - echo "This job tests something, but takes more time than test-job1."
    - echo "After the echo commands complete, it runs the sleep command for 20 seconds"
    - echo "which simulates a test that runs 20 seconds longer than test-job1"
    - sleep 20

deploy-prod:
  stage: deploy
  script:
    - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
  environment: production


build osx:
  stage: build
  script: make build:osx
  artifacts:
    paths:
      - binaries/

build linux:
# ^^^^^^^^^ entity.name.label
#          ^ punctuation.separator.key-value
  stage: build
  script: make build:linux
  artifacts:
    paths:
      - binaries/

test osx:
  stage: test
  script: make test:osx
  dependencies:
    - build osx

test linux:
  stage: test
  script: make test:linux
  dependencies:
    - build linux

deploy:
  stage: deploy
  script: make deploy
  environment: production

.npm-test:
# <- entity.name.label
#^^^^^^^^ entity.name.label
#        ^ punctuation.separator.key-value
  extends: .npm-test-job
  artifacts:
    when: always
    reports:
      junit: "**/reports/**/*.xml"
    paths:
      - coverage
      - reports
  script:
    - npm run test

.npm-deploy-gitlab:
  extends: .npm-deploy-job
  before_script:
    - *set-gitlab-token
#   ^ meta.block.script punctuation.definition.block.sequence.item
#     ^ meta.block.script keyword.control.flow.alias punctuation.definition.alias
#      ^^^^^^^^^^^^^^^^ meta.block.script variable.other.alias
    - *setup-node-modules
#   ^ meta.block.script punctuation.definition.block.sequence.item
#     ^ meta.block.script keyword.control.flow.alias punctuation.definition.alias
#      ^^^^^^^^^^^^^^^^^^ meta.block.script variable.other.alias
    - *setup-gitlab-registry
  script:
    - npm publish --registry "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"


release-finish:
  extends: release
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\//
      when: manual
  script:
    - NEW_VERSION="${NEW_VERSION:-${CI_COMMIT_BRANCH#release/}}"
    - >-
      mvn
      --batch-mode
      # ^^^^^^^^^^ source.shell meta.function-call.arguments meta.parameter.option variable.parameter.option
      $MAVEN_CLI_OPTS_DEFAULT
      $MAVEN_CLI_OPTS
      $MAVEN_GITFLOW_CLI_OPTS
      gitflow:release-finish
      # ^^^^^^^^^^^^^^^^^^^^^ source.shell meta.function-call.arguments - variable
      -DpushRemote=true
      -DreleaseVersion="${NEW_VERSION}"
      #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.shell meta.function-call.arguments
      #               ^ keyword.operator.assignment
      #                ^^^^^^^^^^^^^^^^ meta.string
      #                   ^^^^^^^^^^^ meta.interpolation.parameter variable.other.readwrite
      -DskipTestProject=true

include:
  - local: setup.yml

.teardown:
  after_script:
    - echo deleting environment

test:
  script:
    - !reference [.setup, script]
#   ^ punctuation.definition.block.sequence.item
#     ^^^^^^^^^^ meta.property storage.type.tag-handle
#                ^^^^^^^^^^^^^^^^ meta.sequence.flow
#                ^ punctuation.definition.sequence.begin
#                 ^^^^^^ constant.other.label
#                       ^ punctuation.separator.sequence
#                         ^^^^^^ keyword.other
#                               ^ punctuation.definition.sequence.end
#                                ^ - meta.sequence
    - echo running my own command
#   ^ meta.block.script punctuation.definition.block.sequence.item
#     ^^^^ source.shell.bash meta.function-call.identifier support.function.echo
  after_script:
    - !reference [.teardown, after_script]

.vars:
  variables:
    URL: "http://my-url.internal"
    IMPORTANT_VAR: "the details"

test-vars-1:
  variables: !reference [.vars, variables]
  script:
    - printenv

test-vars-2:
  variables:
    MY_VAR: !reference [.vars, variables, IMPORTANT_VAR]
    #       ^^^^^^^^^^ meta.property storage.type.tag-handle
    #                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.flow
    #                  ^ punctuation.definition.sequence.begin
    #                   ^^^^^ constant.other.label
    #                        ^ punctuation.separator.sequence
    #                          ^^^^^^^^^ keyword.other
    #                                   ^ punctuation.separator.sequence
    #                                     ^^^^^^^^^^^^^ variable.other.constant
  script:
    - printenv

job1:
  artifacts:
    paths:
      - binaries/
      - .config

job2:
  artifacts:
    paths: !reference [job1, artifacts, paths, further_nesting]
#          ^^^^^^^^^^ meta.property storage.type.tag-handle
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.flow
#                      ^^^^ constant.other.label
#                          ^ punctuation.separator.sequence
#                            ^^^^^^^^^ keyword.other
#                                     ^ punctuation.separator.sequence
#                                       ^^^^^ variable.other.constant
#                                            ^ punctuation.separator.sequence
#                                              ^^^^^^^^^^^^^^^ variable.other.constant
#                                                             ^ punctuation.definition.sequence.end
