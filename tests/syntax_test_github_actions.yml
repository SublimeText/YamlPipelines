# SYNTAX TEST "Packages/YamlPipelines/Github Actions.sublime-syntax"
name: ci
# <- source.yaml.pipeline.github-actions

on:
  push:
    branches:
      - 'master'
      - 'develop/**'
    tags-ignore:
      - '*'
    paths:
      - '**/syntax_test_*'
      - '**/*.hidden-tmLanguage'
      - '**/*.sublime-syntax'
      - '**/*.tmLanguage'
      - '**/*.tmPreferences'
      - '.github/workflows/ci.yml'
  pull_request:
    branches:
      - 'master'
      - 'develop/**'
    paths:
      - '**/syntax_test_*'
      - '**/*.hidden-tmLanguage'
      - '**/*.sublime-syntax'
      - '**/*.tmLanguage'
      - '**/*.tmPreferences'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

jobs:
  run_syntax_tests:
# ^^^^^^^^^^^^^^^^ entity.name.function.github-actions
#                 ^ punctuation.separator.key-value.yaml
    name: Test on ${{ matrix.sublime-channel }} build
    #     ^^^^^^^^ meta.string.yaml string.unquoted.plain.out.yaml
    #             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.pipeline meta.block.pipeline - string
    #                                          ^^^^^^ meta.string.yaml string.unquoted.plain.out.yaml
    #             ^^^ punctuation.section.block.begin
    #                 ^^^^^^ constant.language.context
    #                       ^ punctuation.accessor.dot
    #                        ^^^^^^^^^^^^^^^ variable.other.member
    #                                        ^^ punctuation.section.block.end
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'SKIP SCRIPTS')"
#   ^^ string.unquoted.plain.out keyword.control.flow.condition
#        ^ keyword.operator.logical
#         ^^^^^^^^ meta.function-call.identifier support.function
# TODO: scope quotes correctly in `if` above
    if: ${{ !contains(github.event.head_commit.message, 'SKIP SCRIPTS') }}
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml meta.interpolation.pipeline meta.block.pipeline - string.unquoted
#       ^^^ punctuation.section.block.begin
#           ^ keyword.operator.logical
#            ^^^^^^^^ meta.function-call.identifier support.function
#                    ^ punctuation.section.parens.begin
#                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments
#                     ^^^^^^ constant.language.context
#                           ^ punctuation.accessor.dot
#                            ^^^^^ variable.other.member
#                                 ^ punctuation.accessor.dot
#                                  ^^^^^^^^^^^ variable.other.member
#                                             ^ punctuation.accessor.dot
#                                              ^^^^^^^ variable.other.member
#                                                     ^ punctuation.separator.argument
#                                                       ^ meta.string punctuation.definition.string.begin
#                                                        ^^^^^^^^^^^^ meta.string string.quoted.single
#                                                                    ^ meta.string punctuation.definition.string.end
#                                                                     ^ punctuation.section.parens.end
#                                                                       ^^ punctuation.section.block.end
    timeout-minutes: 15 # default is 6 hours!
    continue-on-error: ${{ matrix.optional }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        include:

          # latest stable build
          # https://www.sublimetext.com/download
          - sublime-channel: stable
            sublime-build: 4143
            optional: true

          # latest dev build
          # https://www.sublimetext.com/dev
          - sublime-channel: dev
            sublime-build: latest
            optional: false

    steps:

      # https://github.com/actions/checkout
      - name: Checkout Packages
        uses: actions/checkout@v3
        id: some_id
#       ^^ meta.mapping.key.yaml meta.string.yaml string.unquoted.plain.out.yaml
#         ^ punctuation.separator.key-value.github-actions
#           ^^^^^^^ entity.name.label.github-actions
#                  ^ - entity
        with:
          path: st_syntax_tests/Data/Packages
        if: ${{github.repository == 'example-user/cascade-repo'}}
#           ^^^ punctuation.section.block.begin
#              ^^^^^^ constant.language.context
#                    ^ punctuation.accessor.dot
#                     ^^^^^^^^^^ variable.other.member
#                                ^^ keyword.operator.comparison
#                                   ^ punctuation.definition.string.begin
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.single
#                                                             ^ punctuation.definition.string.end

      - name: "Get binary for ${{ matrix.sublime-channel }} build ${{ matrix.sublime-build }}"
        #     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.yaml
        #     ^^^^^^^^^^^^^^^^ string.quoted.double.yaml - meta.interpolation
        #                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.interpolation.pipeline meta.block.pipeline - string
        #                                                  ^^^^^^^ string.quoted.double.yaml - meta.interpolation
        #                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.interpolation.pipeline meta.block.pipeline - string
        #                                                                                    ^ string.quoted.double.yaml punctuation.definition.string.end.yaml - meta.interpolation
        run: |
          if [[ "${{ matrix.sublime-build }}" == "latest" ]]; then
          #  ^^ support.function.test.begin
          #     ^ punctuation.definition.string.begin
          #      ^^^ punctuation.section.block.begin
          #          ^^^^^^ constant.language.context
          #                ^ punctuation.accessor.dot
          #                 ^^^^^^^^^^^^^ variable.other.member
          #                               ^^ punctuation.section.block.end
          #                                 ^ punctuation.definition.string.end
            wget -O st_syntax_tests.tar.xz https://download.sublimetext.com/latest/dev/linux/x64/syntax_tests
          else
            wget -O st_syntax_tests.tar.xz https://download.sublimetext.com/st_syntax_tests_build_${{ matrix.sublime-build }}_x64.tar.xz
          #                                                                                       ^^^ punctuation.section.block.begin.pipeline
          #                                                                                          ^^^^^^^^^^^^^^^^^^^^^^ source.shell.bash.github-actions meta.function-call.arguments.shell meta.interpolation.pipeline
          #                                                                                           ^^^^^^ constant.language.context.github-actions
          #                                                                                                 ^ punctuation.accessor.dot.pipeline
          #                                                                                                  ^^^^^^^^^^^^^ variable.other.member.pipeline
          #                                                                                                                ^^ punctuation.section.block.end.pipeline
          fi
          tar xf st_syntax_tests.tar.xz
          rm st_syntax_tests.tar.xz
#         ^^ source.shell meta.function-call.identifier variable.function
      - name: Run syntax tests
#     ^ punctuation.definition.block.sequence.item - source.shell
        run: |
          cd st_syntax_tests
          ./syntax_tests
        env:
# TODO: scope env var names as variables
          myNull: ${{ null }}
#                     ^^^^ constant.language.null
          myBoolean: ${{ false }}
#                        ^^^^^ constant.language.boolean
          myIntegerNumber: ${{ 711 }}
          myFloatNumber: ${{ -9.2 }}
          myHexNumber: ${{ 0xff }}
          myExponentialNumber: ${{ -2.99e-2 }}
          myString: Mona the Octocat
          myStringInBraces: ${{ 'It''s open source!' }}
#                           ^^^ punctuation.section.block.begin
#                               ^ punctuation.definition.string.begin
#                                ^^^^^^^^^^^^^^^^^^ string.quoted.single
#                                  ^^ constant.character.escape
#                                                  ^ punctuation.definition.string.end
#                                                    ^^ punctuation.section.block.end
          example: ${{ github['sha'] }}
#                  ^^^ punctuation.section.block.begin
#                      ^^^^^^ constant.language.context
#                            ^ punctuation.accessor.begin
#                             ^ punctuation.definition.string.begin
#                              ^^^ string.quoted.single
#                                 ^ punctuation.definition.string.end
#                                  ^ punctuation.accessor.end
#                                    ^^ punctuation.section.block.end

      - name: Validate bicep templates
        uses: azure/CLI@v1
        with:
          inlineScript: |
            for f in ./deploy/infrastructure/template/*.bicep
            do
            echo "validating $f"
            az bicep build -f $f --stdout > /dev/null
            done
#           ^^^^ source.shell.bash.github-actions keyword.control.loop.end.shell

    - name: Heredoc inside bash script inside yaml file
      shell: bash
      run: |
        FOO=$(cat << EOF
          foo
          bar
        EOF
        # ^ entity.name.tag.heredoc.shell
        )

  job_foobar:
    runs-on: ubuntu-22.04
    needs: run_syntax_tests
    needs: [ run_syntax_tests ]
    environment: some_environment_name
    strategy:
      matrix:
        cluster: ${{ fromJson(needs.run_syntax_tests.outputs.matrix).something }}
#                    ^^^^^^^^ meta.function-call.identifier.pipeline support.function.pipeline
#                                                                   ^ punctuation.accessor.dot.pipeline
    steps:
      - uses: what/ever@v1

      - name: Create annotation for build error
        run: |
          echo "::error file=app.js,line=1::Missing semicolon"
          echo "::debug::Set the Octocat variable"
          echo "::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      - name: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
        run: |
          echo '# Some Markdown Content Here' >> $GITHUB_STEP_SUMMARY
#                                                ^^^^^^^^^^^^^^^^^^^^ variable.language.github-actions
